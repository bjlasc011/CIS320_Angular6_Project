{"version":3,"sources":["ng://ngx-file-drop/src/lib/ngx-drop/upload-file.model.ts","ng://ngx-file-drop/src/lib/ngx-drop/upload-event.model.ts","ng://ngx-file-drop/src/lib/ngx-drop/file-drop.component.ts","ng://ngx-file-drop/src/lib/ngx-drop/file-drop.module.ts"],"names":["UploadFile","relativePath","fileEntry","this","UploadEvent","files","FileComponent","zone","renderer","_this","headertext","customstyle","disableIf","showBrowseBtn","browseBtnLabel","onFileDrop","EventEmitter","onFileOver","onFileLeave","stack","subscription","dragoverflag","globalDisable","numOfActiveReadEntries","globalStart","listen","evt","globalEnd","prototype","onDragOver","event","isDropzoneDisabled","emit","preventAndStop","onDragLeave","dropFiles","dataTransfer","dropEffect","items","checkFiles","onBrowseButtonClick","fileSelector","nativeElement","click","uploadFiles","target","i","item","entry","this_1","canGetAsEntry","webkitGetAsEntry","isFile","toUpload","name","addToQueue","isDirectory","traverseFileTree","fakeFileEntry","file","callback","length","timerObservable","timer","unsubscribe","subscribe","t","path","push","run","popFromStack","pushToStack","dirReader_1","createReader","entries_1","thisObj_1","readEntries_1","readEntries","res","concat","toUpload_1","str","pop","clearQueue","stopPropagation","preventDefault","ngOnDestroy","Component","args","selector","template","NgZone","Renderer2","Input","Output","ViewChild","FileDropModule","NgModule","declarations","exports","imports","CommonModule","providers","bootstrap"],"mappings":"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","sourcesContent":["import { FileSystemEntry, FileSystemFileEntry, FileSystemDirectoryEntry } from './dom.types';\r\n\r\n/**\r\n * fileEntry is an instance of {@link FileSystemFileEntry} or {@link FileSystemDirectoryEntry}.\r\n * Which one is it can be checked using {@link FileSystemEntry.isFile} or {@link FileSystemEntry.isDirectory}\r\n * properties of the given {@link FileSystemEntry}.\r\n */\r\nexport class UploadFile {\r\n    constructor(\r\n        public relativePath: string,\r\n        public fileEntry: FileSystemEntry) {\r\n    }\r\n}\r\n","import { UploadFile } from './upload-file.model';\r\n\r\nexport class UploadEvent {\r\n    constructor(\r\n        public files: UploadFile[]) {\r\n    }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  NgZone,\r\n  OnDestroy,\r\n  Renderer2,\r\n  ViewChild,\r\n  ElementRef\r\n} from '@angular/core';\r\nimport { timer, Subscription } from 'rxjs';\r\n\r\nimport { UploadFile } from './upload-file.model';\r\nimport { UploadEvent } from './upload-event.model';\r\nimport { FileSystemFileEntry, FileSystemEntry, FileSystemDirectoryEntry } from './dom.types';\r\n\r\n@Component({\r\n  selector: 'file-drop',\r\n  templateUrl: './file-drop.component.html',\r\n  styleUrls: ['./file-drop.component.scss']\r\n})\r\nexport class FileComponent implements OnDestroy {\r\n\r\n  @Input()\r\n  public headertext: string = '';\r\n  @Input()\r\n  public customstyle: string = 'drop-zone';\r\n  @Input()\r\n  public disableIf: boolean = false;\r\n  @Input()\r\n  public showBrowseBtn: boolean = false;\r\n  @Input()\r\n  public browseBtnLabel: string = 'Browse files';\r\n\r\n  @Output()\r\n  public onFileDrop: EventEmitter<UploadEvent> = new EventEmitter<UploadEvent>();\r\n  @Output()\r\n  public onFileOver: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output()\r\n  public onFileLeave: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  @ViewChild('fileSelector')\r\n  public fileSelector: ElementRef;\r\n\r\n  stack: string[] = [];\r\n  files: UploadFile[] = [];\r\n  subscription: Subscription | null = null;\r\n  dragoverflag: boolean = false;\r\n\r\n  globalDisable: boolean = false;\r\n  globalStart: Function;\r\n  globalEnd: Function;\r\n\r\n  numOfActiveReadEntries = 0;\r\n\r\n  constructor(\r\n    private zone: NgZone,\r\n    private renderer: Renderer2\r\n  ) {\r\n    this.globalStart = this.renderer.listen('document', 'dragstart', (evt: Event) => {\r\n      this.globalDisable = true;\r\n    });\r\n    this.globalEnd = this.renderer.listen('document', 'dragend', (evt: Event) => {\r\n      this.globalDisable = false;\r\n    });\r\n  }\r\n\r\n  public onDragOver(event: Event): void {\r\n    if (!this.isDropzoneDisabled()) {\r\n      if (!this.dragoverflag) {\r\n        this.dragoverflag = true;\r\n        this.onFileOver.emit(event);\r\n      }\r\n      this.preventAndStop(event);\r\n    }\r\n  }\r\n\r\n  public onDragLeave(event: Event): void {\r\n    if (!this.isDropzoneDisabled()) {\r\n      if (this.dragoverflag) {\r\n        this.dragoverflag = false;\r\n        this.onFileLeave.emit(event);\r\n      }\r\n      this.preventAndStop(event);\r\n    }\r\n  }\r\n\r\n  public dropFiles(event: DragEvent): void {\r\n    if (!this.isDropzoneDisabled()) {\r\n      this.dragoverflag = false;\r\n      if (event.dataTransfer) {\r\n        event.dataTransfer.dropEffect = 'copy';\r\n        let items: FileList | DataTransferItemList;\r\n        if (event.dataTransfer.items) {\r\n          items = event.dataTransfer.items;\r\n        } else {\r\n          items = event.dataTransfer.files;\r\n        }\r\n        this.preventAndStop(event);\r\n        this.checkFiles(items);\r\n      }\r\n    }\r\n  }\r\n\r\n  public onBrowseButtonClick(event: MouseEvent): void {\r\n    if (this.fileSelector && this.fileSelector.nativeElement) {\r\n      (this.fileSelector.nativeElement as HTMLInputElement).click();\r\n    }\r\n  }\r\n\r\n  public uploadFiles(event: Event): void {\r\n    if (!this.isDropzoneDisabled()) {\r\n      if (event.target) {\r\n        const items = (event.target as HTMLInputElement).files || ([] as any);\r\n        this.checkFiles(items);\r\n      }\r\n    }\r\n  }\r\n\r\n  private checkFiles(items: FileList | DataTransferItemList): void {\r\n    for (let i = 0; i < items.length; i++) {\r\n      const item = items[i];\r\n      let entry: FileSystemEntry | null = null;\r\n      if (this.canGetAsEntry(item)) {\r\n        entry = item.webkitGetAsEntry();\r\n      }\r\n\r\n      if (!entry) {\r\n        if (item) {\r\n          const fakeFileEntry: FileSystemFileEntry = {\r\n            name: (item as File).name,\r\n            isDirectory: false,\r\n            isFile: true,\r\n            file: (callback: (filea: File) => void): void => {\r\n              callback(item as File)\r\n            }\r\n          };\r\n          const toUpload: UploadFile = new UploadFile(fakeFileEntry.name, fakeFileEntry);\r\n          this.addToQueue(toUpload);\r\n        }\r\n      } else {\r\n        if (entry.isFile) {\r\n          const toUpload: UploadFile = new UploadFile(entry.name, entry);\r\n          this.addToQueue(toUpload);\r\n        } else if (entry.isDirectory) {\r\n          this.traverseFileTree(entry, entry.name);\r\n        }\r\n      }\r\n    }\r\n\r\n    const timerObservable = timer(200, 200);\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n    this.subscription = timerObservable.subscribe(t => {\r\n      if (this.files.length > 0 && this.numOfActiveReadEntries === 0) {\r\n        this.onFileDrop.emit(new UploadEvent(this.files));\r\n        this.files = [];\r\n      }\r\n    });\r\n  }\r\n\r\n  private traverseFileTree(item: FileSystemEntry, path: string): void {\r\n    if (item.isFile) {\r\n      const toUpload: UploadFile = new UploadFile(path, item);\r\n      this.files.push(toUpload);\r\n      this.zone.run(() => {\r\n        this.popFromStack();\r\n      });\r\n    } else {\r\n      this.pushToStack(path);\r\n      path = path + '/';\r\n      const dirReader = (item as FileSystemDirectoryEntry).createReader();\r\n      let entries: FileSystemEntry[] = [];\r\n      const thisObj = this;\r\n\r\n      const readEntries = function () {\r\n        thisObj.numOfActiveReadEntries++;\r\n        dirReader.readEntries(function (res) {\r\n          if (!res.length) {\r\n            // add empty folders\r\n            if (entries.length === 0) {\r\n              const toUpload: UploadFile = new UploadFile(path, item);\r\n              thisObj.zone.run(() => {\r\n                thisObj.addToQueue(toUpload);\r\n              });\r\n            } else {\r\n              for (let i = 0; i < entries.length; i++) {\r\n                thisObj.zone.run(() => {\r\n                  thisObj.traverseFileTree(entries[i], path + entries[i].name);\r\n                });\r\n              }\r\n            }\r\n            thisObj.zone.run(() => {\r\n              thisObj.popFromStack();\r\n            });\r\n          } else {\r\n            // continue with the reading\r\n            entries = entries.concat(res);\r\n            readEntries();\r\n          }\r\n          thisObj.numOfActiveReadEntries--\r\n        });\r\n      };\r\n\r\n      readEntries();\r\n    }\r\n  }\r\n\r\n  private canGetAsEntry(item: any): item is DataTransferItem {\r\n    return !!item.webkitGetAsEntry;\r\n  }\r\n\r\n  private isDropzoneDisabled(): boolean {\r\n    return (this.globalDisable || this.disableIf);\r\n  }\r\n\r\n  private addToQueue(item: UploadFile): void {\r\n    this.files.push(item);\r\n  }\r\n\r\n  pushToStack(str: string): void {\r\n    this.stack.push(str);\r\n  }\r\n\r\n  popFromStack(): string | undefined {\r\n    return this.stack.pop();\r\n  }\r\n\r\n  private clearQueue(): void {\r\n    this.files = [];\r\n  }\r\n\r\n  private preventAndStop(event: Event): void {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n      this.subscription = null;\r\n    }\r\n    this.globalStart();\r\n    this.globalEnd();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {FileComponent} from './file-drop.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FileComponent,\r\n  ],\r\n  exports: [FileComponent],\r\n  imports: [CommonModule],\r\n  providers: [],\r\n  bootstrap: [FileComponent],\r\n})\r\nexport class FileDropModule {}\r\n"]}